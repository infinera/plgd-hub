syntax = "proto3";

package certificateauthority.pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "certificate-authority/pb/cert.proto";
import "certificate-authority/pb/signingRecords.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "plgd certificate authority - API";
    version: "1.0";
    description: "";
    contact: {
      name: "plgd.dev";
      url: "https://github.com/plgd-dev/hub";
      email: "info@plgd.dev";
    };
    license: {
      name: "Apache License 2.0";
      url: "https://github.com/plgd-dev/hub/blob/v2/LICENSE";
    };
  };
  schemes: [ HTTPS ];
  consumes: [ "application/json", "application/protojson" ];
  produces: [ "application/json", "application/protojson" ];
};

option go_package = "github.com/plgd-dev/hub/v2/certificate-authority/pb;pb";

service CertificateAuthority {
  // SignIdentityCertificate sends a Identity Certificate Signing Request to the certificate authority 
  // and obtains a signed certificate. Both in the PEM format. It adds EKU: '1.3.6.1.4.1.44924.1.6' .
  rpc SignIdentityCertificate(SignCertificateRequest) returns (SignCertificateResponse) {
    option (google.api.http) = {
      post: "/api/v1/sign/identity-csr"
      body: "*"
      additional_bindings: {
        post: "/certificate-authority/api/v1/sign/identity-csr"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "sign csr" ]
    };
  }
  
  // SignCertificate sends a Certificate Signing Request to the certificate authority 
  // and obtains a signed certificate. Both in the PEM format.
  rpc SignCertificate(SignCertificateRequest) returns (SignCertificateResponse) {
    option (google.api.http) = {
      post: "/api/v1/sign/csr"
      body: "*"
      additional_bindings: {
        post: "/certificate-authority/api/v1/sign/csr"
        body: "*"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "sign csr" ]
    };
  }

  // Get signed certificate records.
  rpc GetSigningRecords (GetSigningRecordsRequest) returns (stream SigningRecord) {
    option (google.api.http) = {
      get: "/api/v1/signing/records"
      additional_bindings: {
        get: "/certificate-authority/api/v1/signing/records"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "signing records" ]
    };
  };

  // Revoke signed certificate records or delete expired signed certificate records.
  rpc DeleteSigningRecords (DeleteSigningRecordsRequest) returns (DeletedSigningRecords) {
    option (google.api.http) = {
      delete: "/api/v1/signing/records"
      additional_bindings: {
        delete: "/certificate-authority/api/v1/signing/records"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: [ "signing records" ]
    };
  };
}
